"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[317],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8692:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),i=["components"],l={},c="\u26d3 XCM Onboarding",s={unversionedId:"calamari/XcmOnboarding",id:"calamari/XcmOnboarding",title:"\u26d3 XCM Onboarding",description:"Process Overview:",source:"@site/docs/calamari/XcmOnboarding.md",sourceDirName:"calamari",slug:"/calamari/XcmOnboarding",permalink:"/docs/calamari/XcmOnboarding",editUrl:"https://github.com/Manta-Network/docs/edit/main/docs/calamari/XcmOnboarding.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"\ud83c\udf9f  Crowdloan Token Claim",permalink:"/docs/calamari/CrowdloanClaim"},next:{title:"\ud83d\udcdd Overview",permalink:"/docs/dolphin/Overview"}},p=[{value:"Process Overview:",id:"process-overview",children:[],level:2},{value:"Local XCM Integration",id:"local-xcm-integration",children:[],level:2},{value:"XCM Integration on Rococo",id:"xcm-integration-on-rococo",children:[{value:"Rococo Ecosystem Data",id:"rococo-ecosystem-data",children:[],level:3},{value:"Sync Node &amp; Open Rococo Slot Request",id:"sync-node--open-rococo-slot-request",children:[],level:3}],level:2},{value:"Calculate and Fund your Parachain&#39;s Sovereign Account",id:"calculate-and-fund-your-parachains-sovereign-account",children:[],level:2},{value:"Create HRMP Channel with Dolphin",id:"create-hrmp-channel-with-dolphin",children:[{value:"Get the Relay Encoded Call Data to Open HRMP Channel.",id:"get-the-relay-encoded-call-data-to-open-hrmp-channel",children:[],level:3},{value:"Send XCM to Relay Chain",id:"send-xcm-to-relay-chain",children:[],level:3}],level:2},{value:"Accepting HRMP Channel with Calamari",id:"accepting-hrmp-channel-with-calamari",children:[{value:"Get the Relay Encoded Call Data to Accept HRMP Channel",id:"get-the-relay-encoded-call-data-to-accept-hrmp-channel",children:[],level:3},{value:"Send XCM to Relay Chain",id:"send-xcm-to-relay-chain-1",children:[],level:3}],level:2},{value:"Assets Registrations",id:"assets-registrations",children:[{value:"Registering your Asset on Dolphin",id:"registering-your-asset-on-dolphin",children:[],level:3},{value:"Registering Calamari\u2019s Token on your Parachain",id:"registering-calamaris-token-on-your-parachain",children:[],level:3},{value:"Example Polkadot Launch Config",id:"example-polkadot-launch-config",children:[],level:3}],level:2},{value:"Next Steps - Calamari &amp; Manta",id:"next-steps---calamari--manta",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-xcm-onboarding"},"\u26d3 XCM Onboarding"),(0,r.kt)("h2",{id:"process-overview"},"Process Overview:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Test XCM between Calamari and your runtime locally with polkadot-launch.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Become a parachain on Rococo.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Calculate and fund your parachain's sovereign account on Rococo.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Open HRMP channels with Calamari.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Assets registrations.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Complete XCM tests between parachains.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Next steps discussion.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Manta Team Contact:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Georgi (XCM Eng): @Ghz (Telegram)"),(0,r.kt)("li",{parentName:"ul"},"Shumo (Co-founder, Tech.): @xstec (Telegram)")))),(0,r.kt)("h2",{id:"local-xcm-integration"},"Local XCM Integration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"As a first step we insist that both teams first run all tests on a local network."),(0,r.kt)("li",{parentName:"ul"},"For that you can download the latest manta binary from the Releases page."),(0,r.kt)("li",{parentName:"ul"},"Then use polkadot-launch to launch a ",(0,r.kt)("inlineCode",{parentName:"li"},"calamari-local")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"calamari-dev")," network for testing."),(0,r.kt)("li",{parentName:"ul"},"You will also need to launch a ",(0,r.kt)("inlineCode",{parentName:"li"},"rococo-local")," relay chain using the latest release of Polkadot."),(0,r.kt)("li",{parentName:"ul"},"Here's a reference polkadot-launch config for ",(0,r.kt)("a",{parentName:"li",href:"XcmOnboarding#example-polkadot-launch-config"},"calamari-dev"),"."),(0,r.kt)("li",{parentName:"ul"},"Please let us know if there's a specific branch of your codebase that we should test with.")),(0,r.kt)("h2",{id:"xcm-integration-on-rococo"},"XCM Integration on Rococo"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The next step of the Calamari integration is to integrate with our parachain (Dolphin) on the official Rococo relay chain. As part of this integration, you\u2019ll need to register an HRMP channel with Dolphin. On the Rococo ecosystem we can also test integration with a number of other parachains, as most Kusama chains have also deployed on Rococo.")),(0,r.kt)("h3",{id:"rococo-ecosystem-data"},"Rococo Ecosystem Data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/explorer"},"Rococo endpoint")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Feddie.rococo.dolphin.engineering#/explorer"},"Dolphin endpoint")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://wiki.polkadot.network/docs/build-pdk#obtaining-roc"},"Rococo faucet guide")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://discord.gg/UvXpxuyg"},"Dolphin faucet"))),(0,r.kt)("h3",{id:"sync-node--open-rococo-slot-request"},"Sync Node & Open Rococo Slot Request"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To sync your node, you can use the following ",(0,r.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/paritytech/polkadot/master/node/service/res/rococo.json"},"relay chain spec")," (note: relay chain is Rococo based, and will probably take a few hours to sync)"),(0,r.kt)("li",{parentName:"ul"},"Register your parachain on Rococo. For that you will need to open a ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/paritytech/subport/issues"},"Rococo Slot Request")," issue and follow the instructions.")),(0,r.kt)("h2",{id:"calculate-and-fund-your-parachains-sovereign-account"},"Calculate and Fund your Parachain's Sovereign Account"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To calculate your Parachain\u2019s Sovereign account, you can use the following tool: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Manta-Network/Dev-Tools/tree/main/caclulate-sovereign-account"},"https://github.com/Manta-Network/Dev-Tools/tree/main/caclulate-sovereign-account")),(0,r.kt)("li",{parentName:"ul"},"Make sure you run the command by providing the parachain ID (flag  \u2013paraid NUMBER) that you\u2019ve selected on Rococo. For example, Dolphin\u2019s Sovereign account for both the relay chain and other parachains can be obtained with:\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ts-node calculateSovereignAddress.ts --paraid 2084\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The result will be:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Sovereign Account Address on Relay: 0x7061726124080000000000000000000000000000000000000000000000000000\nSovereign Account Address on other Parachains (Generic): 0x7369626c24080000000000000000000000000000000000000000000000000000\nSovereign Account Address on Dolphin: 0x7369626c24080000000000000000000000000000\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Once you\u2019ve got your ",(0,r.kt)("inlineCode",{parentName:"li"},"Sovereign Account"),"\u2019s address, please fund it using the ",(0,r.kt)("a",{parentName:"li",href:"https://wiki.polkadot.network/docs/build-pdk#obtaining-roc"},"Rococo faucet"),". Otherwise you won\u2019t be able to create the HRMP channel as the transaction will fail due to insufficient fees. Let us know if you need additional funds.")),(0,r.kt)("h2",{id:"create-hrmp-channel-with-dolphin"},"Create HRMP Channel with Dolphin"),(0,r.kt)("h3",{id:"get-the-relay-encoded-call-data-to-open-hrmp-channel"},"Get the Relay Encoded Call Data to Open HRMP Channel."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Once your parachain is onboard, you need to create the HRMP channel between your Parachain and Dolphin."),(0,r.kt)("li",{parentName:"ul"},"The first step is to get an encoded call data from the relay chain. The extrinsic contains the target parachain ID, max number of messages, and max message size, described in the next bullet."),(0,r.kt)("li",{parentName:"ul"},"In PolkadotJS app, switch to the Rococo network. Go to Developer -> ",(0,r.kt)("a",{parentName:"li",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/js"},"Javascript section"),". Run the following code, note to replace the demo recipient para id with your own:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const tx = api.tx.hrmp.hrmpInitOpenChannel(2084, 8, 1024);\nconsole.log(tx.toHex());\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The result will be like:")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"0x3c040x1700240800000800000000040000"),", remove the leading hex ",(0,r.kt)("inlineCode",{parentName:"p"},"3c04"),", and so the encoded result is ",(0,r.kt)("inlineCode",{parentName:"p"},"0x1700240800000800000000040000"),"."),(0,r.kt)("h3",{id:"send-xcm-to-relay-chain"},"Send XCM to Relay Chain"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The next step is to build and send an XCM message to the relay chain that will request a channel to be opened through the relay chain. This XCM message needs to be sent from the root account (either SUDO or via governance). The message can be broken down in the following elements:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Withdraw asset: take funds out of the Sovereign Account of the origin parachain (in the relay chain) to a holding state"),(0,r.kt)("li",{parentName:"ol"},"Buy execution: buys execution time from the relay chain, to execute the XCM message"),(0,r.kt)("li",{parentName:"ol"},"Transact: provides the call data to be executed"),(0,r.kt)("li",{parentName:"ol"},"Deposit asset (optional): refunds the leftover funds after the execution. If this is not provided, no refunds will be carried out"))),(0,r.kt)("li",{parentName:"ul"},"Therefore, to build/send this XCM, you need to:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Polkadot.js Apps in your parachain -> extrinsics")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set the following parameters: polkadotXcm -> send")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The destination has to be the relay chain, for dest (V1) set:\n",(0,r.kt)("inlineCode",{parentName:"p"},"{ parents:1, interior: Here }"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"For the message (V2), you\u2019ll be adding 4 items (described before):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"1. WithdrawAsset { id: Concrete { parents: 0, interior: Here}, Fungible: 1000000000000 }\n2. BuyExecution { id: Concrete: {parents: 0, interior: Here}, Fungible: 1000000000000, weightLimit: Unlimited }\n3. Transact { originType: Native, requireWeightAtMost: 1000000000, call: XcmDoubleEncoded: { encoded: RelayEncodedCallData } }\n    Note: you need to provide the encoded call data obtained before\n4. RefundSurplus\n5. DepositAsset: { assets: Wild { Wild: All }, maxAssets: 1, beneficiary: { parents: 0, interior: X1 { X1: AccountId32 { network: Any, id: SovereignAccountonRelay } } } }\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Note:")," The values used above are for reference to be used in this testing environment, do not use these values in production!")))),(0,r.kt)("li",{parentName:"ul"},"Once this message is sent, the relay chain should execute the content and the request to open the channel with Dolphin"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Please let us know once you\u2019ve requested opening the channel because the request needs to be accepted by Dolphin."))),(0,r.kt)("p",null,"Here's an example of the fully formed extrinsic:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://i.imgur.com/GUN8qJd.png",alt:"https://i.imgur.com/GUN8qJd.png"})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://i.imgur.com/3ONY21d.png",alt:"https://i.imgur.com/3ONY21d.png"})),(0,r.kt)("h2",{id:"accepting-hrmp-channel-with-calamari"},"Accepting HRMP Channel with Calamari"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Channels are one way. This means that if you open a channel with Dolphin, it will allow you only to send tokens from your parachain to Dolphin. There needs to be a channel that Dolphin will request to send back tokens, and you need to accept."),(0,r.kt)("li",{parentName:"ul"},"The process of accepting the channel is similar to the one for opening, meaning that you have to construct an encoded call data in the relay chain, and then get it executed via an XCM from your parachain.")),(0,r.kt)("h3",{id:"get-the-relay-encoded-call-data-to-accept-hrmp-channel"},"Get the Relay Encoded Call Data to Accept HRMP Channel"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To get an encoded call data from the relay chain, to accept a channel request with a target parachain, take the following steps:"),(0,r.kt)("li",{parentName:"ul"},"In PolkadotJS app, switch to the live Polkadot/Kusama network. Go to Developer -> ",(0,r.kt)("a",{parentName:"li",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/js"},"Javascript section"),". Run the following code, note to replace the demo recipient para id with your own:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const tx = api.tx.hrmp.hrmpAcceptOpenChannel(2084);\nconsole.log(tx.toHex());\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The result will be like:")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"0x1c04170124080000"),", remove the leading hex ",(0,r.kt)("inlineCode",{parentName:"p"},"1c04"),", and the encoded result is ",(0,r.kt)("inlineCode",{parentName:"p"},"0x170124080000"),"."),(0,r.kt)("h3",{id:"send-xcm-to-relay-chain-1"},"Send XCM to Relay Chain"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The steps are the same as before (when making the request to open a channel). The main difference is in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Transact")," item, where you need to provide the encoded call data calculated above. This XCM message needs to be sent from the root account (either SUDO or via governance):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Transact { originType: Native, requireWeightAtMost: 1000000000, call: XcmDoubleEncoded: { encoded: RelayEncodedCallData } }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": The values used above are for reference to be used in this testing environment, do not use these values in production!"),(0,r.kt)("h2",{id:"assets-registrations"},"Assets Registrations"),(0,r.kt)("h3",{id:"registering-your-asset-on-dolphin"},"Registering your Asset on Dolphin"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Once the channel is opened, we need to register the asset that will be transferred to Dolphin. For that, we need the following information:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"MultiLocation")," of your asset (as seen by Dolphin). Please indicate parachain ID and the interior (if you use any pallet index, general index, etc)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Asset Name")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Asset symbol")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Number of decimals")))),(0,r.kt)("li",{parentName:"ul"},"Please write this information as a comment in this issue."),(0,r.kt)("li",{parentName:"ul"},"We will confirm once the asset is registered. We will also set an arbitrary UnitsPerSecond, which is the number of tokens charged per second of execution of the XCM message."),(0,r.kt)("li",{parentName:"ul"},"After the asset is successfully registered, you can try transferring tokens from your parachain to Dolphin."),(0,r.kt)("li",{parentName:"ul"},"For testing, please also provide your Parachain WS Endpoint so we can connect to it. Lastly, we would need some funds to the following account:","  ",(0,r.kt)("inlineCode",{parentName:"li"},"5CacAW3K4gq3Ufv2dAqUFYWKoqJcQaFu346ahesmt4sua7Xx")),(0,r.kt)("li",{parentName:"ul"},"If you need DOL tokens (the native token for Dolphin) to use your parachain's asset, you can get some from our Discord Bot - We can also provide you with some if you give us your address")),(0,r.kt)("h3",{id:"registering-calamaris-token-on-your-parachain"},"Registering Calamari\u2019s Token on your Parachain"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To register our DOL token on your parachain, you can use the following MultiLocation:")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'{ "parents": 1, "interior": {"X1": { "Parachain": 2084 }}')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"And the following metadata:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Name: Dolphin\nSymbol: DOL\nDecimals: 18\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Note: Calamari MultiLocation is different!")),(0,r.kt)("h3",{id:"example-polkadot-launch-config"},"Example Polkadot Launch Config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "relaychain": {\n        "bin": "./polkadot",\n        "chain": "rococo-local",\n        "nodes": [\n            {\n                "name": "alice",\n                "wsPort": 9944,\n                "port": 30444,\n                "flags": [\n                    "--rpc-cors=all",\n                    "--execution=wasm",\n                    "--wasm-execution=compiled",\n                ]\n            },\n            {\n                "name": "bob",\n                "wsPort": 9955,\n                "port": 30555,\n                "flags": [\n                    "--rpc-cors=all",\n                    "--execution=wasm",\n                    "--wasm-execution=compiled",\n                ]\n            },\n            {\n                "name": "charlie",\n                "wsPort": 9966,\n                "port": 30666,\n                "flags": [\n                    "--rpc-cors=all",\n                    "--execution=wasm",\n                    "--wasm-execution=compiled",\n                ]\n            }\n        ],\n        "genesis": {\n            "runtime": {\n                "runtime_genesis_config": {\n                    "configuration": {\n                        "config": {\n                            "validation_upgrade_frequency": 10,\n                            "validation_upgrade_delay": 10\n                        }\n                    }\n                }\n            }\n        }\n    },\n    "parachains": [\n        {\n            "bin": "./manta",\n            "chain": "calamari-dev",\n            "nodes": [\n                {\n                    "wsPort": 9801,\n                    "port": 31201,\n                    "name": "alice",\n                    "flags": [\n                        "--rpc-cors=all",\n                        "--rpc-port=9971",\n                        "--execution=wasm",\n                        "--wasm-execution=compiled"\n                    ]\n                }\n            ]\n        }\n    ],\n    "hrmpChannels": [\n    ],\n    "types": {},\n    "finalization": false\n}\n')),(0,r.kt)("h2",{id:"next-steps---calamari--manta"},"Next Steps - Calamari & Manta"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The following items must have been completed and fully tested in the Rococo Ecosystem with Dolphin before proceeding with an XCM integration on Calamari (and Manta in the future):"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Bi-directional HRMP channels between Dolphin and your parachain"),(0,r.kt)("li",{parentName:"ol"},"Bi-directional asset registration (DOL token and the token of your parachain)"),(0,r.kt)("li",{parentName:"ol"},"Both teams must have successfully tested asset transfers through Polkadot.js Apps"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Once everything is successful we can plan governance proposals to open HRMP channels and asset registrations on the Kusama parachains, as well as additional marketing initiatives if relevant."))))}d.isMDXComponent=!0}}]);